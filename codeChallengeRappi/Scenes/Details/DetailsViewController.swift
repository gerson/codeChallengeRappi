//
//  DetailsViewController.swift
//  codeChallengeRappi
//
//  Created by Gerson Villanueva on 11/12/2018.
//  Copyright (c) 2018 rappi. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import MBProgressHUD

enum Sources: String {
    case Movie, Serie
}

struct DetailModel {
    var posterPath: String?
    var title: String?
    var overview: String?
    var identifier: Int?
    var source: Sources
}

class DetailsViewController: UIViewController {
    
  @IBOutlet weak var imageView: UIImageView!
  @IBOutlet weak var titleLabel: UILabel!
  @IBOutlet weak var overviewLabel: UILabel!
  @IBOutlet weak var playButton: UIButton!

  var detailModel: DetailModel!
  
  // MARK: View lifecycle
  override func viewDidLoad() {
    super.viewDidLoad()
    
    title = "Details"
  }
    
  override func viewWillAppear(_ animated: Bool) {
    super.viewWillAppear(animated)
    fillWithModel()
  }
    
  private func fillWithModel() {
    imageView.image = #imageLiteral(resourceName: "placeholder")
    if let posterPath = detailModel.posterPath {
        imageView.kf.indicatorType = .activity
        let url = URL(string: "https://image.tmdb.org/t/p/w185/\(posterPath)")
        imageView.kf.setImage(with: url, placeholder: #imageLiteral(resourceName: "placeholder"))
    }
    titleLabel.text = detailModel.title
    overviewLabel.text = detailModel.overview
    
    let origImage = #imageLiteral(resourceName: "play")
    let tintedImage = origImage.withRenderingMode(UIImage.RenderingMode.alwaysTemplate)
    playButton.setImage(tintedImage, for: .normal)
    playButton.tintColor = UIColor.red
  }
  
  @IBAction func playButtonTapped(_ sender: Any) {
    switch detailModel.source {
    case .Movie:
        playMovieVideo()
    default:
        playSerieVideo()
    }
  }
    
  private func playMovieVideo() {
    let loading = MBProgressHUD(view: self.view)
    if let identifier = detailModel.identifier {
        loading.show(animated: true)
        VideoServices.getMovieVideo(with: identifier, completion: {[weak self] (videos: [Video]) in
            let videoVC = UIStoryboard(name: "VideoViewController", bundle: nil).instantiateInitialViewController() as! VideoViewController
            videoVC.videoKey = videos.first?.key
            self?.present(videoVC, animated: true, completion: nil)
            loading.hide(animated: true)
        }) { (err: Error) in
            loading.hide(animated: true)
            print(err)
        }
    }
  }
    
  private func playSerieVideo() {
    let loading = MBProgressHUD(view: self.view)
    if let identifier = detailModel.identifier {
        loading.show(animated: true)
        VideoServices.getSerieVideo(with: identifier, completion: {[weak self] (videos: [Video]) in
            let videoVC = UIStoryboard(name: "VideoViewController", bundle: nil).instantiateInitialViewController() as! VideoViewController
            videoVC.videoKey = videos.first?.key
            self?.present(videoVC, animated: true, completion: nil)
            loading.hide(animated: true)
        }) { (err: Error) in
            loading.hide(animated: true)
            print(err)
        }
    }
  }
}
