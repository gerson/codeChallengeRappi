//
//  MoviesViewController.swift
//  codeChallengeRappi
//
//  Created by Gerson Villanueva on 09/12/2018.
//  Copyright (c) 2018 rappi. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol MoviesDisplayLogic: class {
  func displayMovies(viewModel: Movies.ViewModel)
}

class MoviesViewController: UIViewController, MoviesDisplayLogic {
  var interactor: MoviesBusinessLogic?
  var router: (NSObjectProtocol & MoviesRoutingLogic & MoviesDataPassing)?
    
  // MARK: IBOutlets
  @IBOutlet weak var segmentedControl: UISegmentedControl!
  @IBOutlet weak var collectionView: UICollectionView!
    

  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder) {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup() {
    let viewController = self
    let interactor = MoviesInteractor()
    let presenter = MoviesPresenter()
    let router = MoviesRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
  // MARK: View lifecycle
  
  override func viewDidLoad() {
    super.viewDidLoad()
    fetchPopularMovies()
  }
  
  @IBAction func segmentedChanged(_ sender: UISegmentedControl) {
    switch sender.selectedSegmentIndex {
    case 1:
        fetchTopRatedMovies()
    case 2:
        fetchTopUpcomingMovies()
    default:
        fetchPopularMovies()
    }
  }
  
  func fetchPopularMovies() {
    let request = Movies.Request(category: Categories.Popular)
    interactor?.fetchMovies(request: request)
  }
    
  func fetchTopRatedMovies() {
    let request = Movies.Request(category: Categories.TopRated)
    interactor?.fetchMovies(request: request)
  }
    
  func fetchTopUpcomingMovies() {
    let request = Movies.Request(category: Categories.Upcoming)
    interactor?.fetchMovies(request: request)
  }
  
  func displayMovies(viewModel: Movies.ViewModel) {
    //nameTextField.text = viewModel.name
  }
}


extension MoviesViewController: UICollectionViewDelegate {
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
        let padding: CGFloat =  50
        let collectionViewSize = collectionView.frame.size.width - padding
        
        return CGSize(width: collectionViewSize/2, height: collectionViewSize/2)
    }
}

extension MoviesViewController: UICollectionViewDataSource {
    
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return 10
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        return UICollectionViewCell()
    }
    
}
