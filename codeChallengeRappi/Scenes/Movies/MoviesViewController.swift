//
//  MoviesViewController.swift
//  codeChallengeRappi
//
//  Created by Gerson Villanueva on 09/12/2018.
//  Copyright (c) 2018 rappi. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol MoviesDisplayLogic: class {
  func displayMovies(viewModel: Movies.ViewModel)
}

class MoviesViewController: BaseViewController, MoviesDisplayLogic {
    
  var interactor: MoviesBusinessLogic?
  var router: MoviesRouter?
  var movies: Movies.ViewModel?
    
  // MARK: IBOutlets
  @IBOutlet weak var segmentedControl: UISegmentedControl!
  @IBOutlet weak var collectionView: UICollectionView!
    

  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder) {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup() {
    let viewController = self
    let interactor = MoviesInteractor()
    let presenter = MoviesPresenter()
    let router = MoviesRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
  }
  
  // MARK: View lifecycle
  
  override func viewDidLoad() {
    super.viewDidLoad()
    
    title = "Movies"
    
    collectionView.register(UINib.init(nibName: "PosterCollectionViewCell", bundle: nil), forCellWithReuseIdentifier: kCellIdentifier)
    
    fetchPopular()
  }
  
  @IBAction func segmentedChanged(_ sender: UISegmentedControl) {
    fetchByCategory(categoryIndex: sender.selectedSegmentIndex)
    collectionView.setContentOffset(CGPoint(x: 0, y: 0), animated: false)
  }
  
  override func fetchPopular(page: Int = 1) {
    super.fetchPopular()
    let request = Movies.Request(category: Categories.Popular, page: page)
    interactor?.fetchMovies(request: request)
  }
    
  override func fetchTopRated(page: Int = 1) {
    super.fetchTopRated()
    let request = Movies.Request(category: Categories.TopRated, page: page)
    interactor?.fetchMovies(request: request)
  }
    
  override func fetchUpcoming(page: Int = 1) {
    let request = Movies.Request(category: Categories.Upcoming, page: page)
    super.fetchUpcoming()
    interactor?.fetchMovies(request: request)
  }
  
  func displayMovies(viewModel: Movies.ViewModel) {
    movies = viewModel
    collectionView.reloadData()
  }
}

extension MoviesViewController: UICollectionViewDelegate {
    
    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        if let movies = movies?.displayedMovies {
            let movie = movies[indexPath.row]
            let detailModel = DetailModel(posterPath: movie.posterPath, title: movie.title, overview: movie.overview, identifier: movie.identifier, source: .Movie)
            router?.routeToDetail(detailModel: detailModel)
        }
    }
}

extension MoviesViewController: UICollectionViewDelegateFlowLayout {
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
        let padding: CGFloat =  30
        let collectionViewSize = collectionView.frame.size.width - padding
        
        return CGSize(width: collectionViewSize/2, height: collectionViewSize/1.5)
    }
}

extension MoviesViewController: UICollectionViewDataSource {
    
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return movies?.displayedMovies.count ?? 0
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: kCellIdentifier, for: indexPath) as! PosterCollectionViewCell
        if let movies = movies?.displayedMovies {
            cell.posterPath = movies[indexPath.row].posterPath
            //Fetching more moviews by page
            loadMoreMovies(indexPath: indexPath, movies: movies)
        }
        return cell
    }
    
    private func loadMoreMovies(indexPath: IndexPath, movies: [Movies.ViewModel.DisplayedMovie]) {
        if (indexPath.row > (movies.count - 5)){
            let page = (movies.count/kNumberOfItemByPage) + 1
            switch currentCategory {
            case .TopRated:
                fetchTopRated(page: page)
            case .Upcoming:
                fetchUpcoming(page: page)
            default:
                fetchPopular(page: page)
            }
        }
    }
}
