//
//  SeriesViewController.swift
//  codeChallengeRappi
//
//  Created by Gerson Villanueva on 11/12/2018.
//  Copyright (c) 2018 rappi. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol SeriesDisplayLogic: class {
  func displaySeries(viewModel: Series.ViewModel)
}

class SeriesViewController: BaseViewController, SeriesDisplayLogic {
  var interactor: SeriesBusinessLogic?
  var router: (NSObjectProtocol & SeriesRoutingLogic & SeriesDataPassing)?
  var series: Series.ViewModel?
    
  // MARK: IBOutlets
  @IBOutlet weak var segmentedControl: UISegmentedControl!
  @IBOutlet weak var collectionView: UICollectionView!

  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder) {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup() {
    let viewController = self
    let interactor = SeriesInteractor()
    let presenter = SeriesPresenter()
    let router = SeriesRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
  // MARK: View lifecycle
  
  override func viewDidLoad() {
    super.viewDidLoad()
    
    title = "Series"
    
    collectionView.register(UINib.init(nibName: "PosterCollectionViewCell", bundle: nil), forCellWithReuseIdentifier: kCellIdentifier)
    
    fetchPopular()
  }
  
  @IBAction func segmentedChanged(_ sender: UISegmentedControl) {
    fetchByCategory(categoryIndex: sender.selectedSegmentIndex)
    collectionView.setContentOffset(CGPoint(x: 0, y: 0), animated: false)
  }
    
  override func fetchPopular(page: Int = 1) {
    super.fetchPopular()
    let request = Series.Request(category: Categories.Popular, page: page)
    interactor?.fetchSeries(request: request)
  }

  override func fetchTopRated(page: Int = 1) {
    super.fetchTopRated()
    let request = Series.Request(category: Categories.TopRated, page: page)
    interactor?.fetchSeries(request: request)
  }

  override func fetchUpcoming(page: Int = 1) {
    super.fetchUpcoming()
    let request = Series.Request(category: Categories.Upcoming, page: page)
    interactor?.fetchSeries(request: request)
  }
  
  func displaySeries(viewModel: Series.ViewModel) {
    series = viewModel
    collectionView.reloadData()
  }
}

extension SeriesViewController: UICollectionViewDelegateFlowLayout {
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
        let padding: CGFloat =  30
        let collectionViewSize = collectionView.frame.size.width - padding
        
        return CGSize(width: collectionViewSize/2, height: collectionViewSize/1.5)
    }
}

extension SeriesViewController: UICollectionViewDataSource {
    
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return series?.displayedSeries.count ?? 0
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: kCellIdentifier, for: indexPath) as! PosterCollectionViewCell
        if let series = series?.displayedSeries {
            cell.posterPath = series[indexPath.row].posterPath
            //Fetching more moviews by page
            loadMoreMovies(indexPath: indexPath, series: series)
        }
        return cell
    }
    
    private func loadMoreMovies(indexPath: IndexPath, series: [Series.ViewModel.DisplayedSerie]) {
        if (indexPath.row > (series.count - 5)){
            let page = (series.count/kNumberOfItemByPage) + 1
            switch currentCategory {
            case .TopRated:
                fetchTopRated(page: page)
            case .Upcoming:
                fetchUpcoming(page: page)
            default:
                fetchPopular(page: page)
            }
        }
    }
    
}
