//
//  MoviesInteractorTests.swift
//  codeChallengeRappi
//
//  Created by Gerson Villanueva on 13/12/2018.
//  Copyright (c) 2018 rappi. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import codeChallengeRappi
import XCTest

class MockMoviesWorker: MoviesWorkerProtocol {
    func fetchByCategoy(category: Categories, page: Int, completion: @escaping ([Movie]) -> Void, failure: @escaping (Error) -> Void) {
        let movie1 = Movie(); movie1.movieId = 1; movie1.title = "Test"
        let movie2 = Movie(); movie2.movieId = 2; movie2.title = "Test 2"
        completion([movie1, movie2])
    }
}

class MoviesInteractorTests: XCTestCase {
  // MARK: Subject under test
  
  var sut: MoviesInteractor!
  
  // MARK: Test lifecycle
  
  override func setUp() {
    super.setUp()
    setupMoviesInteractor()
  }
  
  override func tearDown() {
    super.tearDown()
  }
  
  // MARK: Test setup
  
  func setupMoviesInteractor() {
    sut = MoviesInteractor()
    sut.worker = MockMoviesWorker()
  }
  
  // MARK: Test doubles
  
  class MoviesPresentationLogicSpy: MoviesPresentationLogic {
    
    var presentMoviesCalled = false
    
    func presentMovies(response: Movies.Response) {
        presentMoviesCalled = true
    }
  }
  
  // MARK: Tests
  
  func testPresentMovies() {
    // Given
    let spy = MoviesPresentationLogicSpy()
    sut.presenter = spy
    let request = Movies.Request(category: Categories.Popular, page: 1)
    
    // When
    sut.fetchMovies(request: request)
    
    // Then
    XCTAssertTrue(spy.presentMoviesCalled, "fetchMovies(request: request) should ask the presenter to format the result")
  }
}
