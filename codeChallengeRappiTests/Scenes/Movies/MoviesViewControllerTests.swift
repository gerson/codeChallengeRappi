//
//  MoviesViewControllerTests.swift
//  codeChallengeRappi
//
//  Created by Gerson Villanueva on 13/12/2018.
//  Copyright (c) 2018 rappi. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import codeChallengeRappi
import XCTest

class MoviesViewControllerTests: XCTestCase {
  // MARK: Subject under test
  
  var sut: MoviesViewController!
  var window: UIWindow!
  
  // MARK: Test lifecycle
  
  override func setUp() {
    super.setUp()
    window = UIWindow()
    setupMoviesViewController()
  }
  
  override func tearDown() {
    window = nil
    super.tearDown()
  }
  
  // MARK: Test setup
  
  func setupMoviesViewController() {
    sut = (UIStoryboard(name: "MoviesViewController", bundle: nil).instantiateInitialViewController() as! MoviesViewController)
  }
  
  func loadView() {
    window.addSubview(sut.view)
    RunLoop.current.run(until: Date())
  }
  
  // MARK: Test doubles
  
  class MoviesBusinessLogicSpy: MoviesBusinessLogic {
    
    var fetchMoviesCalled = false
    
    func fetchMovies(request: Movies.Request) {
        fetchMoviesCalled = true
    }
  }
  
  // MARK: Tests
  
  func testShouldFetchMoviesWhenViewIsLoaded() {
    // Given
    let spy = MoviesBusinessLogicSpy()
    sut.interactor = spy
    
    // When
    loadView()
    
    // Then
    XCTAssertTrue(spy.fetchMoviesCalled, "viewDidLoad() should ask the interactor to do something")
  }
  
  func testDisplayMovies() {
    // Given
    let viewModel = Movies.ViewModel(displayedMovies: [Movies.ViewModel.DisplayedMovie(title: "Movie Test", posterPath: "/movie.png", releaseDate: Date(), overview: "Test test", identifier: 1), Movies.ViewModel.DisplayedMovie(title: "Movie Test 2", posterPath: "/movie1.png", releaseDate: Date(), overview: "Test test1", identifier: 2)])
    
    // When
    loadView()
    sut.displayMovies(viewModel: viewModel)
    
    // Then
    XCTAssertTrue(sut.movies?.displayedMovies.count == 2, "Wrong number of series.");
    XCTAssertEqual(sut.movies?.displayedMovies.first?.title, "Movie Test")
  }
}
